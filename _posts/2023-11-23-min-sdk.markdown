---
layout: post
title:  "Code Cleanups for minSdkVersion Increases"
date:   2023-11-23 00:34:49 +0200
categories: tech blog
---

## Introduction *

Increasing your minSdkVersion has many benefits blah blah *
It's a tradeoff, you lose some % of users *
Show the market breakdown graphic. Maybe show it by region too - highlight that it's different by region.

## Cleaning up your codebase

The first step is to identify and remove all obsolete code and resources. This can be done automatically by running gradle lint, either locally or as part of a CI build. The check `ObsoleteSdkInt` should find any cases of code and resources rendered obsolete by the increased minSdk version. Alternatively you could check manually:
- Search your codebase for usages of `BUILD.VERSION_CODES`, `Build.VERSION.SDK_INT`, `@RequiresApi`, `@TargetApi`, and `tools:targetApi`, to check for spots where your code branches dependeding on sdk version.
- Check for qualified resources, e.g. if raising your minSdkVersion from 21 to 24, a file `v23/styles.xml` can be removed. Remember that the highest api level up to a device's level will be matched as the correct resource to use. So the `v23/styles.xml` file in this example should be merged into the main `styles.xml` file rather than simply deleted.

This blog post will focus mostly on new SDK features which become usable with a minSdk increase, as well as common 'hacks' which may not be guarded by a check which is easily searched for. Each section in the list below lists the cleanups which are enabled by an increase to the respective minSdkVersion or higher.

## 14 (Ice Cream Sandwich)

- [`VectorDrawableCompat`][vector-back-compat] is supported from sdk 14 and up - you can replace your png files with vector assets.

## 19 (4.4 - 4.4.4 / KitKat)

- Make use of the latest AndroidX library versions after their minSdk was increased [from October 2023 onwards][androidx].

## 21 (5.0 / Lollipop)

- TLS 1.2 is supported. In case you added a [workaround][tls-workaround] to support TLS on older android versions, it can be removed.
- The [multidex library][multidex] can be removed.
- You can use Jetpack Compose in your project.

## 23 (6.0 / Marshmallow)

- [App links][app links] are enabled from Android 6.0 and up - so with minSdk of 23 or hgher, you can assume that all target devices will handle verified links without showing the disambiguation interface.
- TODO `android:foreground`

## 24 (7.0 / Nougat)

- Full support for vector drawable features, without using backwards compatibility:
    - You can remove `vectorDrawables.useSupportLibrary = true` from your `build.gradle` file.
    - You can switch usages of `app:srcCompat` to `android:src`
    - Resource references can be used inside vector drawables (e.g. setting `fillColor="?attr/colorOnPrimary"`).

## 25 (7.1 / Nougat)

- todo

## 26 

- TODO `android:focusedByDefault`
- Support for java APIs `java.time` is enabled - this means that you may no longer need to use a backwards compatibility solution for this API, e.g. [desugaring][desugaring] or [ThreeTen][threeten]
- TODo can the desugar library be removed? Check if all the backported APIs are in api 26


<!-- bibliography -->

[androidx]: https://android-developers.googleblog.com/2023/10/androidx-minsdkversion-19.html

<!-- this is pretty extensive, but I want to show how code can be cleaned up too -->
[kaushikgopal]: https://github.com/kaushikgopal/why_bump_android_minsdk

[vector-back-compat]: https://developer.android.com/develop/ui/views/graphics/vector-drawable-resources#vector-drawables-backward-solution

[tls-workaround]: [https://stackoverflow.com/questions/28943660/how-to-enable-tls-1-2-support-in-an-android-application-running-on-android-4-1]

[desugaring]: https://developer.android.com/studio/write/java8-support#library-desugaring

[api-26-java]: https://developer.android.com/about/versions/oreo/android-8.0#java

[threeten]: https://github.com/ThreeTen/threetenbp

[multidex]: https://developer.android.com/build/multidex

[app links]: https://developer.android.com/training/app-links/verify-android-applinks